{"version":3,"sources":["Components/Buscador.js","Components/Error.js","Components/Imagen.js","Components/Paginacion.js","Components/Resultado.js","Components/Menu.js","Components/Pie.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","datosConsulta","useState","termino","dato","guardarDato","onSubmit","e","preventDefault","className","onChange","target","name","value","type","id","placeholder","Error","mensaje","data-dismiss","aria-label","aria-hidden","Imagen","props","imagen","largeImageURL","likes","webformatURL","tags","views","src","alt","width","height","viewBox","fill","xmlns","fillRule","d","href","rel","Paginacion","onClick","pagAnterior","noPagina","pagSiguiente","Resultado","imagenes","length","Fragment","map","key","Menu","data-toggle","data-target","aria-controls","aria-expanded","Pie","App","componente","guardarTermino","error","guardarError","total","guardarTotal","guardarImagenes","pagina","guardarPagina","scroll","document","querySelector","scrollIntoView","useEffect","a","url","fetch","respuesta","json","resultado","hits","console","log","consultarAPi","pag","datos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.897111a2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n// Buscador señala la función que está en compnente padre App\r\nfunction Buscador({datosConsulta}){\r\n    // State para Buscador\r\n    const [dato, guardarDato] = useState({\r\n        // termino solo sirve como un álias para cuando se revisan los componentes en consola\r\n        termino : ''\r\n    })\r\n    // Se crea el evento para obtener la información\r\n    const handleChange = e => {\r\n        // cambiar el state\r\n        guardarDato({\r\n            // Se crea una copia del estado actual\r\n            ...dato,\r\n            // luego se sustituye\r\n            [e.target.name] : e.target.value\r\n        });\r\n    }\r\n    // Crea el evento de búsqueda\r\n    const buscar = e => {\r\n        // Cancela el evento si este es cancelable, sin detener el resto del funcionamiento del evento\r\n        e.preventDefault();\r\n        // Pasar la búsqueda hacia el componente padre por medio de la función\r\n        datosConsulta(dato);\r\n    }\r\n    // Lo que se va a visualizar\r\n    return ( \r\n        <form onSubmit = { buscar }>\r\n            <div className=\"row px-5 mx-5\">\r\n                <div className=\"form-group col-md-8\">\r\n                    <input \r\n                        onChange={ handleChange }\r\n                        type=\"text\" \r\n                        name=\"termino\" \r\n                        id=\"termino\" \r\n                        className=\"form-control form-control-lg esq\" \r\n                        placeholder=\"Busca tu imágen...\" \r\n                    />\r\n                </div>\r\n                <div className=\"form-group col-md-4\">\r\n                    <input \r\n                        type=\"submit\" \r\n                        className=\"btn btn-success btn-lg btn-block esq\" \r\n                        value=\"Buscar\" \r\n                    />\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n \r\nexport default Buscador;\r\n\r\n// Acción de búsqueda JS\r\n// document.querySelector('form').addEventListener('submit', function());","import React from 'react';\r\n// Es una función donde recibe el mensaje de Resultado\r\nfunction Error({mensaje}) {\r\n    // Lo que se va a visualizar\r\n    return(\r\n        <div className=\"row\">\r\n            <div className=\"col-12 mt-5\">\r\n                <div className=\"alert alert-dimissible alert-danger p-5 text-center esq2\"> \r\n                    <button type=\"button\" className=\"close ml-3\" data-dismiss=\"alert\" aria-label=\"Close\">\r\n                        <span aria-hidden=\"true\">&times;</span>\r\n                    </button>\r\n                    <strong>Ops!</strong> { mensaje }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error;","import React from 'react';\r\n// Imagen recibe información de Resultado\r\nconst Imagen = (props) => {\r\n    // Se crea una variable constante para no repetir código.\r\n    // Lo que se hace es extraer los datos del arreglo de cada\r\n    // imagen proveniente del props.imagen\r\n    const { largeImageURL, likes, webformatURL, tags, views} = props.imagen;\r\n    // Lo que se va a visualizar\r\n    return(\r\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\r\n            <div className=\"card\">\r\n                <img src = { webformatURL } alt = { tags } className=\"card-img-top\" />\r\n                <div className=\"card-body justify-content-center\">\r\n                    <p className=\"card-text align-self-center text-center\">\r\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-heart-fill mr-2 text-danger\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path fillRule=\"evenodd\" d=\"M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z\"/>\r\n                        </svg>\r\n                        { likes }\r\n\r\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-dash mx-2\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path fillRule=\"evenodd\" d=\"M3.5 8a.5.5 0 0 1 .5-.5h8a.5.5 0 0 1 0 1H4a.5.5 0 0 1-.5-.5z\"/>\r\n                        </svg>\r\n\r\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-eye-fill mr-2 text-primary\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path d=\"M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z\"/>\r\n                            <path fillRule=\"evenodd\" d=\"M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z\"/>\r\n                        </svg>                        \r\n                        { views }\r\n                    </p>\r\n                    <a className=\"btn btn-block btn-success esq\" href = { largeImageURL } target=\"_blank\" rel=\"noopener noreferrer\">Ver Imagen</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    // Solo se agregan los elementos a usar entre llaves\r\n}\r\n\r\nexport default Imagen;","import React from 'react';\r\n// Paginacion recibe funciones de Resultado\r\nconst Paginacion = props => {\r\n    // Lo que se va a visualizar\r\n    return(\r\n        <div className=\"pt-3 pb-0\">\r\n            <button type=\"button\" onClick={props.pagAnterior} className=\"btn btn-info mr-4 esq px-3\">\r\n                <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" className=\"bi bi-chevron-compact-left mr-3\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fillRule=\"evenodd\" d=\"M9.224 1.553a.5.5 0 0 1 .223.67L6.56 8l2.888 5.776a.5.5 0 1 1-.894.448l-3-6a.5.5 0 0 1 0-.448l3-6a.5.5 0 0 1 .67-.223z\"/>\r\n                </svg>\r\n                Anterior\r\n            </button>\r\n            <button className=\"btn btn-success mr-4 esq px-3\">\r\n                { props.noPagina }\r\n            </button>\r\n            <button type=\"button\" onClick={props.pagSiguiente} className=\"btn btn-info esq  px-3\">\r\n                Siguiente\r\n                <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" className=\"bi bi-chevron-compact-righ ml-3\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fillRule=\"evenodd\" d=\"M6.776 1.553a.5.5 0 0 1 .671.223l3 6a.5.5 0 0 1 0 .448l-3 6a.5.5 0 1 1-.894-.448L9.44 8 6.553 2.224a.5.5 0 0 1 .223-.671z\"/>\r\n                </svg>\r\n            </button>\r\n        </div>\r\n    )\r\n    // Los botones para la paginación funcionan con in listener onClick\r\n}\r\n\r\nexport default Paginacion;","import React from 'react';\r\nimport Imagen from './Imagen'\r\nimport Paginacion from './Paginacion';\r\n// Esta función recibe datos del Componente Padre\r\nfunction Resultado({imagenes, pagAnterior, noPagina, pagSiguiente}) {\r\n    // Se crea el método que visualizará todas las imágenes\r\n    const mostrarImagenes = () => {\r\n        // Comprueba el tamaño del arreglo de las imágenes, si es 0\r\n        // cancela las demás lineas\r\n        if (imagenes.length === 0) return null;\r\n        // Lo que se va a visualizar\r\n        return(\r\n            // Fragment evita crear un cruadro html y permite mostrar \r\n            // informacíon sin uso de alguna etiqueta html\r\n            <React.Fragment>\r\n                <h2> Resultados de la búsqueda </h2>\r\n                <div className=\"row col-12 p-5 m-0\">\r\n                    { \r\n                        // Se realiza un recorrido de los arreglos y se\r\n                        // extrae su id y los demas datos por separado;\r\n                        // y luego se envian al componente Imagen\r\n                        imagenes.map(imagen => (\r\n                            <Imagen \r\n                                key = { imagen.id }\r\n                                imagen = { imagen }\r\n                            />\r\n                        ) ) \r\n                    }\r\n                </div>\r\n                {/* Se llama al componente Paginacion y se le envía la función de paginación */}\r\n                <Paginacion \r\n                    pagAnterior = { pagAnterior }\r\n                    noPagina = { noPagina }\r\n                    pagSiguiente = { pagSiguiente }\r\n                />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    // Lo que se va a visualizar\r\n    return(\r\n        <div className=\"py-4 text-center\">\r\n            {   \r\n                // Se llama el metodo que desplegará todas las imagenes\r\n                mostrarImagenes()\r\n            }\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default Resultado;","import React from 'react';\r\n\r\nfunction Menu() {\r\n    return(\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <a className=\"navbar-brand\" href=\"www.example.com\">\r\n        <svg width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" className=\"bi bi-image\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path fillRule=\"evenodd\" d=\"M14.002 2h-12a1 1 0 0 0-1 1v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1zm-12-1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2h-12z\"/>\r\n          <path d=\"M10.648 7.646a.5.5 0 0 1 .577-.093L15.002 9.5V14h-14v-2l2.646-2.354a.5.5 0 0 1 .63-.062l2.66 1.773 3.71-3.71z\"/>\r\n          <path fillRule=\"evenodd\" d=\"M4.502 7a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z\"/>\r\n        </svg>\r\n        </a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor02\" aria-controls=\"navbarColor02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarColor02\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item active\">\r\n              <a className=\"nav-link\" href=\"www.example.com\">Home <span className=\"sr-only\">(current)</span></a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"www.example.com\">Features</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"www.example.com\">Pricing</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"www.example.com\">About</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nexport default Menu;","import React from 'react';\r\n\r\nfunction Pie() {\r\n    return(\r\n        <footer className=\"page-footer font-small bg-dark text-white pt-4\">\r\n            <div className=\"container\">\r\n                <ul className=\"list-unstyled list-inline text-center py-2\">\r\n                    <li className=\"list-inline-item\">\r\n                        <h5 className=\"mb-0\">Register for free</h5>\r\n                    </li>\r\n                    <li className=\"list-inline-item\">\r\n                        <a href=\"example.com\" className=\"btn btn-success esq px-3\">Sign up!</a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"footer-copyright text-center py-3 text-white bg-black\">© 2020 Copyright:\r\n                <a className=\"text-white\" href=\"https://github.com/IsmaSL\"> IsmaSL</a>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Pie;","import React, { useState, useEffect } from 'react';\nimport Buscador from './Components/Buscador';\nimport Error from './Components/Error'\nimport Resultado from './Components/Resultado'\nimport Menu from './Components/Menu';\nimport Pie from './Components/Pie';\n\nfunction App() {\n  // State Principal\n  // Guarda la(s) palabra(S) que se está buscando recibido del Componente Buscador\n  const [termino, guardarTermino] = useState ('');\n  // Guarda el estado de la validación de la búsqueda\n  const [error, guardarError] = useState (false);\n  // Guarda el total de resultados de la búsqueda\n  const [total, guardarTotal] = useState ('');\n  // Guarda las imágenes de la búsqueda\n  const [imagenes, guardarImagenes] = useState ([]);\n  // Guarda el estado de la página\n  const [pagina, guardarPagina] = useState (0);\n  // Volver arriba al cambiar de página\n  const scroll = () => {\n    const elemento = document.querySelector('.jumbotron');\n    elemento.scrollIntoView('smooth', 'start');\n  }\n  // Paginación Anterior\n  const pagAnterior = () => {\n    // Leer state actual\n    let pag = pagina;\n    // Validar si es la pagina 1 para no retroceder\n    if (pagina===1) return null;\n    // Restar 1 a la pag actual\n    pag--;\n    // Agregar cambio state\n    guardarPagina(pag);\n    // Ejecuta el scroll para volver al top de la página\n    scroll();\n  }\n  // Paginación Siguiente\n  const pagSiguiente = () => {\n    // Leer state actual\n    let pag = pagina;\n    // Sumar 1 a la pag actual\n    pag++;\n    // Agregar cambio state\n    guardarPagina(pag);\n    // Ejecuta el scroll para volver al top de la página\n    scroll();\n  }\n  // Función que detecta los cambios\n  useEffect(() => {\n    // Prevenir ejecucución validando que el campo de busqueda esté lleno y el total de imagenes\n    if (termino==='' && total==='') return;\n    // Consultar API: Meter este método sobrecarga useEffect pero en la documentación está así\n    const consultarAPi = async () => {\n      try {\n        // Es la key para usar la API\n        const key = '1732750-d45b5378879d1e877cd1d35a6';\n        // Es la url compuesta por la key, la pabra a buscar y la página en la que está actualmente\n        const url = `https://pixabay.com/api/?key=${key}&q=${termino}&per_page=24&page=${pagina}`;\n        // Consultar URL con Fetch\n        const respuesta = await fetch(url);\n        // Convierte la respuesta a JSON\n        const resultado = await respuesta.json();\n        // Se guardan la cantidad de resultados\n        guardarTotal(resultado.total);\n        // Se guardan las imágenes\n        guardarImagenes(resultado.hits);\n      } catch (er) {\n        console.log('ERROR: '+er);\n      }\n      // Nota: al momento en el que arroja la respuesta, este es un Arreglo que contiene varios elementos,\n      //       los que se usan son Total y Hits; Total contiene la cantidad de resultados de la búsqueda\n      //       y Hits contiene varios arreglos con la información de cada imagen relacionada a la búsqueda.\n    }\n    // Ejecuta el metodo para la API\n    consultarAPi();\n  }, [ termino, total, pagina ]); // ---> Estos son los sets que usa para leer su estado actual\n  // Este método consulta la información que recibe del componente Busqueda para validar su llegada\n  const datosConsulta = datos => {\n    // Validar campo de búsqueda\n    if (datos.termino === '') {\n      // Si no está lleno, se cambia el estado de Error a verdader\n      guardarError(true);\n      // Cancela las lineas restantes dentro de la función\n      return;\n    } \n    // Termino está lleno, agregarlo al State\n    guardarTermino(datos.termino);\n    // Ponemos por default que la página inicia en 1\n    guardarPagina(1);\n    // \"Por si acaso\" volvemos a establecer el error como falso\n    guardarError(false);\n  }\n  // Cargando un componente condicional (componente Error)\n  // Cargo una previa\n  let componente;\n  // Validamos el estado del error\n  if(error){\n    // Hay un error, mostrarlo llamando al componente y enviando un mensaje\n    componente = <Error mensaje='Campo vacio, no se puede reallizar la búsqueda.' />\n  } else if( total === 0 ){\n    // Se realizó la búsqueda pero No se encontraron resultados\n    componente = <Error mensaje='No se encontraron coincidencias.' />\n  } else {\n    // No hay error, por lo tanto se realizó la búsqueda y retornó la información\n    componente = <Resultado \n                    imagenes = { imagenes }\n                    pagAnterior = { pagAnterior }\n                    pagSiguiente = { pagSiguiente }\n                    noPagina = { pagina }\n                />\n  }\n  // Lo que se va a visualizar\n  return (\n    <div className=\"app container p-0 m-0 col-lg-12\">\n      <Menu />\n      <div className=\"jumbotron\">\n        <h1 className=\"text-center pb-2\">Busca tu imagen\n        \n        </h1>\n        <p className=\"text-center pb-3\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam maximus nibh convallis tincidunt sodales.</p>\n        {/* Se llama al componente Buscador, que manda información al componente App */}\n        <Buscador \n          datosConsulta = { datosConsulta }\n        />\n      </div>\n      <div className=\"row justify-content-center mx-0 pb-4 mb-5\">\n        {/* Aquí se llama al componente condicional, depende de su resultado */}\n        { componente }\n      </div>\n      <Pie />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// @Autor: Ismael Santarrosa L\n// @Fecha: Agosto 2020\n// @App: Aplicación para buscar imágenes por medio de una API\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}